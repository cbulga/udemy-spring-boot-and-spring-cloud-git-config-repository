# ==============================================================
# = Clienti Web Service - Versione Produzione
# ==============================================================
server:
  #port: 7051
  port: 705${seq}

spring:
  cache:
    type: redis
  # ==============================================================
  # = Redis Parameters
  # ==============================================================
  redis:
    connect-timeout: 2s
    host: localhost
    #password: password
    port: 6379
    timeout: 1s
  # ==============================================================
  # = Proprietà RabbitMQ
  # ==============================================================
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: rabbitmq
    password: rabbitmq
  # ==============================================================
  # = Proprietà Fonte Dati PostgreSQL
  # ==============================================================
  sql:
    init:
      mode: always
      platform: postgres
  datasource:
    password: 123_Stella
    url: jdbc:postgresql://localhost:5433/AlphaShop
    username: postgres
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true
        format_sql: true
    show-sql: true

  # ==============================================================
  # = Zipkin Parameters
  # ==============================================================
  zipkin:
    base-url: http://localhost:9411/
    sender:
      # invio eventi sincrono
      type: web
      # invio eventi asincrono
    #      type: rabbit
    message-timeout: 5

  # ==============================================================
  # = Sleuth Parameters
  # ==============================================================
  sleuth:
    sampler:
      # probability: varia da 1.0 a 0.0. 1.0: qualsiasi evento inserito nei log sarà anche inviato allo sleuth (ed inviato allo zipkin); 0.0 non invia nulla
      probability: 1.0
    # se true, genera un identificativo univoco per ogni richiesta di 128 bit; se falso ne genera uno da 64 bit
    trace-id128: false

# ================================================================
# = Actuator Parameters
# ================================================================
management:
  info:
    env:
      enabled: true
    git:
      enabled: true
      mode: full
  endpoint:
    health:
      show-details: WHEN_AUTHORIZED
  endpoints:
    web:
      exposure:
        include: health,info,metrics,customInfo,refresh,bus-refresh,hystrix.stream

# ==============================================================
# = Actuator Info
# ==============================================================
info:
  assistenza:
    nome: "Cristian Bulgarelli"
    mail: "cristian.bulgarelli@xantrix.it"
    telefono: "348-12345678"
    orario: "8-18"
  nome:
    nome-app: "Clienti Web Service - Versione Produzione con configurazione esternalizzata su config server"

# ==============================================================
# = Parametri RabbitMQ
# ==============================================================
rabbitmq:
  queueName: alphashop.order.queue
  exchangeName: alphashop.exchange
  routingKey: alphashop.routingKey

# ==============================================================
# = Parametri Fidelity
# ==============================================================
fidelity:
  valminimo: 10
  valbollino: 5
  bonusmobile: 2

# ==============================================================
# = Proprietà Livello Log
# = Default ERROR, WARN e INFO
# = Levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
# ==============================================================
logging:
  file:
    name: "/home/cristian/tmp/Udemy/spring-cloud-course/logs/ClientiSrv.log"
  pattern:
    file: "%d{ dd-MM-yyyy HH:mm:ss.SSS } [%thread] %-5level %logger{36} - %msg%n"
    #    console: "%d{dd-MM-yyyy HH:mm:ss} - %msg%n"
    console: "%d{dd.MM.yyyy HH:mm:ss.SSS} %-5p - [%C]:%m%n"

  logback:
    rollingpolicy:
      max-file-size: 1MB
  # Livello del log generale
  level:
    root: WARN
    #    com:
    #      xantrix:
    #        DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.web: INFO
    com.xantrix.webapp: DEBUG
#    com.hazelcast: INFO

# ==============================================================
# = Eureka Properties
# = Nota: prima di attivare il servizio servono tre heartbeat
# ==============================================================
eureka:
  # ==============================================================
  # = Impostazioni Instance
  # ==============================================================
  instance:
    # intervallo di attesa prima della rimozione del servizio (def 90 sec)
    lease-expiration-duration-in-seconds: 60
    # intervallo di invio dell'heartbeat (def 30 sec)
    leaseRenewalIntervalInSeconds: 15
    # id di identificazione dell'istanza
    instanceId: ${server.port}-${spring.application.name}-${seq}
    #instanceId: ${server.port}-${spring.application.name}
    # registrazione per indirizzo ip (defualt hostname)
    preferIpAddress: true
  # ==============================================================
  # = Impostazioni Client
  # ==============================================================
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      # BimBumBam_2018: password specified in the eurekasrv => application.yml => sicurezza.userpwd parameter (decoded value is BimBumBam_2018)
      defaultZone: ${EUREKA_URL_1:http://user:BimBumBam_2018@localhost:8761/eureka/},${EUREKA_URL_2:http://user:BimBumBam_2018@localhost:8762/eureka/},${EUREKA_URL_3:http://user:BimBumBam_2018@localhost:8763/eureka/}
    # time out di connessione in secondi al server Eureka (def 5 sec)
    eureka-server-connect-timeout-seconds: 8